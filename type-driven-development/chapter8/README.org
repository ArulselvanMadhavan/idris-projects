* Equality: expression relationships between data
  - Use types to express properties of data and the relationships between data.
  - Using types to express guarantees that values are equal.
  - Using types to express guarantees that values are not equal.
** Guaranteeing equivalence of data with equality types
   #+BEGIN_SRC idris
   (==) : Eq ty => ty -> ty -> Bool
   #+END_SRC
   - The types don't tell you anything about the function. You have to
     look at the implementation to figure out what the function does.
   - If you want to compare values at the type level, you need more
     expressive types.
     - Type should guarantee that a comparison between two inputs can
       only be successful only if the inputs really are identical.
** Equality in general: the = type
   #+BEGIN_SRC idris
   data (=) : a -> b -> Type where
        Refl : x = x
   #+END_SRC
   - ~Refl~ short for Reflexive
   - Congruence
     #+BEGIN_SRC idris
     cong : (func: a -> b) (a = b) -> f a = f b
     #+END_SRC
** Type Checking equality proofs
   - An important step in type checking is unification.
   - Unification attempts to resolve implicit arguments like ~x~ in ~Refl~
   - Unifying two terms involves reducing both to normal form then
     trying to find an assignment to implicit arguments which will
     make those normal forms equal.
     #+BEGIN_SRC idris
     twoplustwo_eq_four : 2 + 2 = 4
     twoplustwo_eq_four = Refl
     #+END_SRC
