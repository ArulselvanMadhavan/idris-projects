* Equality: expression relationships between data
  - Use types to express properties of data and the relationships between data.
  - Using types to express guarantees that values are equal.
  - Using types to express guarantees that values are not equal.
** Guaranteeing equivalence of data with equality types
   #+BEGIN_SRC idris
   (==) : Eq ty => ty -> ty -> Bool
   #+END_SRC
   - The types don't tell you anything about the function. You have to
     look at the implementation to figure out what the function does.
   - If you want to compare values at the type level, you need more
     expressive types.
     - Type should guarantee that a comparison between two inputs can
       only be successful only if the inputs really are identical.
** Equality in general: the = type
   #+BEGIN_SRC idris
   data (=) : a -> b -> Type where
        Refl : x = x
   #+END_SRC
   - ~Refl~ short for Reflexive
   - Congruence
     #+BEGIN_SRC idris
     cong : (func: a -> b) (a = b) -> f a = f b
     #+END_SRC
** Type Checking equality proofs
   - An important step in type checking is unification.
   - Unification attempts to resolve implicit arguments like ~x~ in ~Refl~
   - Unifying two terms involves reducing both to normal form then
     trying to find an assignment to implicit arguments which will
     make those normal forms equal.
     #+BEGIN_SRC idris
     twoplustwo_eq_four : 2 + 2 = 4
     twoplustwo_eq_four = Refl
     #+END_SRC
** Type checking and evaluation
   - When Idris type checks an expression,
     - It looks at the expected type of the expression.
     - It looks at the type of the given expression.
     - Evaluates both
     - *Check if they match after evaluating the expressions.*
** Void type
   #+BEGIN_SRC idris
   data Void : Type where
   #+END_SRC
   - Use ~Void~ to express facts about how functions don't behave.
   - ~impossible~ keyword means that the pattern clause must not type-check.
   - It is really important to check totality of functions that return
     ~Void~ to be absolutely sure that the function takes an
     impossible input.
   - If you know that something can't happen, you can use this
     knowledge to express limitations about what can happen.
** Checking properties with precision   
   - /Decidability/ - A property of some values is decidable if you
     can always say whether the property holds or not for specific values.
     #+BEGIN_SRC idris
     data Dec : (prop : Type) -> Type where
          Yes : (prf : prop) -> Dec prop
          No  : (contra : prop -> Void) -> Dec prop
     #+END_SRC
   - Decidable Equality interface
     #+BEGIN_SRC idris
     interface DecEq ty where
         decEq : (val1 : ty) -> (val2 : ty) -> Dec (val1 = val2)
     #+END_SRC
