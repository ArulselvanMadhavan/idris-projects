* Streams and processes: Working with Infinite data
  - Types can be used to distinguish between those expressions for
    which evaluations is guaranteed to terminate and those expressions
    for which evaluation is guaranteed to keep producing new values,
    marking arguments to a data structure as potentially infinite.
** Inf datatype
   - Example: Infinite list
     #+BEGIN_SRC idris
     data InfList : Type -> Type where
          (::) : (value : elem) -> Inf (InfList elem) -> InfList elem
     #+END_SRC
   - There's no /Nil/ constructor. So, no way to end a list.
   - The recursive argument is wrapped in a new data type, /Inf/, that
     marks the argument as potentially infinite.
   - /Inf/ abstract data type
     #+BEGIN_SRC idris
     Inf : Type -> Type
     
     Delay : (value : ty) -> Inf ty
     Force : (computation : Inf ty) -> ty
     #+END_SRC
   - data vs codata
     - data is finite and is intended to be consumed.

     - codata is potentially infinite and is intended to be produced.

   - recursive vs corecursive.

     - Recusion operates by taking data and breaking it down toward a
       base case.

     - Corecursion operates by starting at a base case and building up codata.
** What does it mean for a function to be total?
   - If a function is total, it will never crash due to a missing
     case, and it will always return a well typed result within a
     finite time.
   - Functions that produce infinite data can be used as components of
     terminating functions, provided that they produce a new piece of
     data on request.
   - Idris considers a function to be total when
     - there's a recursive call and there's a decreasing argument that
       converges to a base case.
     - there's a recursive argument to /Delay/, The delayed call will
       *always* be an argument to a data constructor after evaluation
       for all inputs.
** Stream data type
   #+BEGIN_SRC idris
   data Stream : Type -> Type where
        (::) : (value : elem) -> Inf (Stream elem) -> Stream elem
   repeat : elem -> Stream elem
   take   : (n : Nat) -> (xs : Stream elem) -> List elem
   iterate: (f : elem -> elem) -> (x : elem) -> Stream elem
   #+END_SRC
*** Aside: Divides view
    #+BEGIN_SRC idris
    data Divides : Int -> (d : Int)-> Type where
         DivByZero : Int.Divides x 0
         DivBy     : (prf : rem >= 0 && rem < d = True) -> Int.Divides ((d * div) + rem) d
    divides : (val : Int) -> (d : Int) -> Divides val d
    #+END_SRC
** Interactive total programs
   - Interactive programs can be thought of as a program that produces
     a potentially infinite sequence of interactive actions.
   - Non terminating but productive(and total) interactive programs
     using ~InfIO~
     - ~InfIO~ describes infinite sequence of actions.
     - Non terminating yet productive functions using ~InfIO~
     - ~run~ function that converts ~InfIO~ actions to IO actions.
*** Describing Infinite processes
    #+BEGIN_SRC idris
    data InfIO : Type where
         Do : IO a -> (a -> Inf InfIO) -> InfIO
    #+END_SRC
    - Idris runtime system can execute actions of type IO.
    - We need a function to convert InfIO to IO so that Idris runtime
      system can execute them.
      #+BEGIN_SRC idris
      run : InfIO -> IO ()
      run (Do action cont) = do res <- action
                             run (cont res)
      #+END_SRC
*** Generating Infinite structures using Lazy types
    - The purpose of /Lazy/ is to control when Idris evaluates an expression.
    - Idris won't evaluate an expression of type ~Lazy ty~ until it's
      explicitly requested by ~Force~
      #+BEGIN_SRC idris
      Lazy : Type -> Type

      Delay : (value : ty) -> Lazy ty
      Force : (computation : Lazy ty) -> ty
      #+END_SRC
    - Idris inserts calls to Delay and Force implicitly
    - ~Inf~ and ~Lazy~ are implemented using the same type internally.
    - The only difference between them is the way totality checker
      treats them.
      #+BEGIN_SRC idris
      data DelayReason = Infinite | LazyValue
      
      data Delayed : DelayReason -> Type -> Type where
           Delay   : (val : ty)  -> Delayed reason ty
      
      ||| Type Synonym
      Inf : Type -> Type
      Inf ty = Delayed Infinite ty

      ||| Type Synonym
      Lazy : Type -> Type
      Lazy ty = Delayed LazyValue ty

      Force : Delayed Reason ty -> ty
      #+END_SRC
    - Totality Checking
      - If the argument had ~Lazy ty~, it's considered smaller than the
        constructor expression.

      - If the argument had ~Inf ty~, it's not considered smaller than
        the constructor expression. Idris will check if the overall
        expression is productive.
